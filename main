import requests
import datetime
from crewai import Agent, Task, Crew, Process
from langchain_google_genai import ChatGoogleGenerativeAI

# Define Google LLM for interacting with Google Calendar


llm = ChatGoogleGenerativeAI(model="gemini-pro", verbose=True, temperature=0.6, google_api_key="-----------") #API_KEY_HERE

class AgronomistAgent(Agent):
    """
    Agronomist agent responsible for providing detailed farming advice and constructing planting itineraries.
    """
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    
    def retrieve_itinerary(self, crop, location):
        """
        Retrieve planting itinerary from a pre-defined knowledge base.
        """
        # Query the knowledge base with crop and location to retrieve the itinerary
        # Implement logic to access the database or knowledge base
        # Return the retrieved itinerary
        
    def construct_itinerary(self, crop, location):
        """
        Construct planting itinerary by leveraging external resources.
        """
        # Use ChatGoogleGenerativeAI to generate search queries based on crop and location
        query = f"{crop} planting schedule {location}"
        
        # Send search query to Google or specific websites
        response = requests.get("https://example.com", params={"q": query})
        
        # Extract relevant information from the response (e.g., parsing HTML)
        # Construct the planting itinerary based on the extracted information

# Define Farmer Agent
farmer_agent = Agent(
    role='Farmer Agent',
    goal='Gather planting information from the farmer',
    backstory='An agent specialized in interacting with farmers to gather planting information.',
    verbose=True,
    allow_delegation=False,
    llm=llm
)

# Define Agronomist Agent
agronomist_agent = AgronomistAgent(
    role='Agronomist Local Expert at this city',
    goal='Provide best personalized farming advice based on weather, season, and prices of the selected city',
    backstory='An expert that  specialized in providing personalized farming advice based on location and crop.',
    verbose=True,
    allow_delegation=False,
    llm=llm
)

# Define Planner Agent
planner_agent = Agent(
    role='Amazing Planner Agent',
    goal='Create the most amazing plamting calendar with budget and best farming practice '
    ,
    backstory='Specialist in farm management an agronimist with decades of experience calendar based on the provided information.',
    verbose=True,
    allow_delegation=False,
    llm=llm
)

# Define Task for gathering planting information from the farmer
planting_info_task = Task(
    description='Gather planting information from the farmer: {plant}',
    agent=farmer_agent,
    expected_output='Planting information collected from the farmer.'
)

# Define Task for providing personalized farming advice
farming_advice_task = Task(
    description='Provide personalized farming advice for {crop} in {location} starting from {start_date}.',
    agent=agronomist_agent,
    expected_output='Personalized farming advice provided.'
)

# Define Task for generating farming calendar
farming_calendar_task = Task(
    description='Generate farming calendar for {crop} in {location} starting from {start_date}.',
    agent=planner_agent,
    expected_output='Farming calendar generated.'
)

# Define Task for advising if planting season has ended
season_check_task = Task(
    description='Check if the planting season has ended for {crop} in {location} by {current_date}.',
    agent=agronomist_agent,
    expected_output='Planting season status checked.'
)

# Create a Crew for managing the farming process
farming_crew = Crew(
    agents=[farmer_agent, agronomist_agent, planner_agent],
    tasks=[planting_info_task, farming_advice_task, farming_calendar_task, season_check_task],
    verbose=True,
    process=Process.sequential
)

# Execution Flow
print("Welcome to the Farming Assistant")

# Gather planting information from the farmer
print("\nPlease provide some information about your farming plans:")
location = input("Enter your location: ")
crop = input("Enter the crop you want to plant: ")
start_date_input = input("Enter the date you want to start planting (YYYY-MM-DD): ")
start_date = datetime.datetime.strptime(start_date_input, "%Y-%m-%d").date()
print("\nThank you for providing the information.")

# Interpolate farmer's planting information into the tasks descriptions
planting_info_task.interpolate_inputs({"plant": crop})
farming_advice_task.interpolate_inputs({"crop": crop, "location": location, "start_date": start_date})
farming_calendar_task.interpolate_inputs({"crop": crop, "location": location, "start_date": start_date})
current_date = datetime.date.today()
season_check_task.interpolate_inputs({"crop": crop, "location": location, "current_date": current_date})

# Execute the farming crew
print("\nExecuting farming tasks...")
output = farming_crew.kickoff()

# Print output
if output:
    print("\nFarming calendar generated successfully.")
else:
    print("\nThere was an error generating the farming calendar. Please try again later.")
